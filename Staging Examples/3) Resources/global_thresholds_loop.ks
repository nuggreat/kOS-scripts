//The function staging_start creates a data structure for use by the staging_check function
// It takes in one parameter: A list of string and number pairs, the first threshold must be the first pair in the list the second will be the second pair and so on
//  The string is a internal resource name
//  The number is how low that resource must drop to trigger that staging

FUNCTION staging_start {
  PARAMETER sequenceList.
  LOCAL sequenceData IS LIST().
  FROM { LOCAL i IS 0. } UNTIL (i >= sequenceList:LENGTH) STEP { SET i TO i + 2. } DO {
    sequenceData:ADD(sequenceList[0 + i]).
    sequenceData:ADD(MAX(sequenceList[1 + i],0)).
  }
  SET sequenceData[0] TO get_resource(sequenceData[0]).
  RETURN sequenceData.
}

//The function staging_check checks if the global resource amount of the given type is less-than or equal to the paired threshold
// It takes in one parameter which should be the list generated by staging_start
// Will return true when it stages.

FUNCTION staging_check {
  PARAMETER sequenceData.
  IF STAGE:READY AND (sequenceData:LENGTH > 0) {
    IF sequenceData[0]:AMOUNT <= sequenceData[1] {
      PRINT "Staging due to " + sequenceData[0]:NAME + " below the threshold of " + sequenceData[1] + ".".
      STAGE.
      sequenceData:REMOVE(0).
      sequenceData:REMOVE(0).
      IF sequenceData:LENGTH > 0 {
        SET sequenceData[0] TO get_resource(sequenceData[0]).
      }
      RETURN TRUE.
    }
  }
}

//The function get_resource returns the resourceAgrogate for the resource of the passed in name
// It takes one parameter: the name of the resource
// If there is no resource that has that name on the ship it will instead return a lexicon that can stand in for a resourceAgrogate

FUNCTION get_resource {
  PARAMETER resName.
  FOR res IN SHIP:RESOURCES {
    IF res:NAME = resName {
      RETURN res.
    }
  }
  RETURN LEX("name",resName,"amount",-1,"amount",-1,"density",-1,"parts",LIST()).
}