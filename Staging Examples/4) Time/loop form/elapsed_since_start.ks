//The staging_start function generates the data structure needed to run staging_check and staging_eta functions
// The function takes 2 parameters the first is mandatory the second is optional
//  The first parameter is a list of scalars representing seconds exactly what they should be is set by the second parameter
//   The list is also expected to use normal indexing where the index 0 is the first time in the list
//   If the second parameter is true the list is expected to be sorted with the lowest number at index 0
//  The second parameter is a boolean defaulted to false
//   If true  the passed in list of times is expected to be the number of seconds after calling staging_start staging events are expected to happen
//   If false the passed in list of times is expected to be the time between staging events
//    In this case staging_start will convert the passed in times to match with the first option

FUNCTION staging_start {
  PARAMETER stageTimes, absoluteTimes IS FALSE.
  LOCAL sequence IS LIST().
  LOCAL i IS 0.
  FOR stageTime IN stageTimes {
    sequence:ADD(stageTime + i).
    IF NOT absoluteTimes {
      SET i TO i + stageTime.
    }
  }
  RETURN LEX("sequenceStart",TIME:SECONDS,"stageSequence",sequence).
}

//The staging_check function checks if staging should occur 
// This is done by the time since the staging_start function was run against the data structure generated by staging_start
// The function must be passed the data structure generated by the staging_start function
// The function returns true when it has staged successfully and will return false in all other cases

FUNCTION staging_check {
  PARAMETER stageData.
  IF STAGE:READY {
    IF stageData:stageSequence:LENGTH > 0 {
      IF ((TIME:SECONDS - stageData:sequenceStart) >= stageData:stageSequence[0]) {
        PRINT "staging".
        STAGE.
        stageData:stageSequence:REMOVE(0).
        RETURN TRUE.
      }
    }
  }
  RETURN FALSE.
}

//The staging_eta function returns the ETA until the next time the staging_check function will trigger staging
// If the returned number is positive then it means staging is that many seconds in the future
// If the returned number is negative then it means staging is that many seconds in the past

FUNCTION staging_eta {//positive means it is pending, negative means it is past
  PARAMETER stageData.
  IF stageData:stageSequence:LENGTH > 0 {
    RETURN stageData:stageSequence[0] - (TIME:SECONDS - stageData:lastTime).
  } ELSE {
    RETURN 0.
  }
}