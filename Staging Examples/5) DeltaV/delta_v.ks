//The staging_start function constructs the configuration data structure needed by staging_check
// The function takes one parameters
//  The first parameter is what the deltaV of the current stage must be below before staging can happen
//   Is defaulted to 0
//  The second parameter is how many seconds the deltaV must be below thr first parameter for staging to happen
//   Is defaulted to 1
//  The third parameter is the number of seconds that must pass between staging events
//   Is defaulted to 1

FUNCTION staging_start {
  PARAMETER threshold IS 0, stableDelay IS 1, stageDelay IS 1.
  RETURN LEX(
    "threshold",threshold,
    "stableDelay",stableDelay,
    "stableTime",TIME:SECONDS + stableDelay,
    "betweenDelay",stageDelay,
    "nextStageTime",TIME:SECONDS + stageDelay
  ).
}

//The staging_check function compares the current deltaV in the stage and current time against a configuration and stages when all critical are met
// The first condition that must be met is that the deltaV in the current stage must be below the specified threshold
// The second condition that must be met is that the deltaV must stay below the threshold for a given number of seconds
// The third condition that must be met is that enough time must have passed between the current staging attempt and the past successful staging
// The function takes one parameter which is the configuration generated by the staging_start function

FUNCTION staging_check {
  PARAMETER stagingData.
  IF STAGE:DELTAV:CURRENT <= stagingData:threshold {
    IF STAGE:READY {
      IF TIME:SECONDS >= stagingData:stableTime {
        IF TIME:SECONDS >= stagingData:nextStageTime {
          PRINT "Staging because the deltaV of the current stage is below threshold".
          STAGE.
          SET stagingData:nextStageTime TO TIME:SECONDS + stagingData:betweenDelay.
        }
      }
    }
  } ELSE {
    SET stagingData:stableTime TO TIME:SECONDS + stagingData:stableDelay.
  }
  RETURN FALSE.
}